import com.fasterxml.jackson.databind.ObjectMapper

import java.time.Instant

plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
}

group = 'com.ruchij'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.session:spring-session-data-redis'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

task information {
    doLast {
        def file = new File("$buildDir/resources/main/information.json")
        file.parentFile.mkdirs()

        if (file.exists()) {
            file.delete()
        }

        def serviceInformation =
                Map.of(
                        "group", project.group,
                        "name", project.name,
                        "version", project.version,
                        "gradleVersion", gradle.gradleVersion,
                        "buildTimestamp", Instant.now().toString(),
                        "gitBranch", "git rev-parse --abbrev-ref HEAD".execute().text.trim(),
                        "gitCommit", "git rev-parse --short HEAD".execute().text.trim()
                )

        file.withWriter {
            writer ->
                new ObjectMapper().writeValue(writer, serviceInformation)
        }
    }
}

classes {
    dependsOn information
}
